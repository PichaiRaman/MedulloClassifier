group_by(method_dataset) %>%
summarise(cell_type = toString(cell_type)) %>%
mutate(len = length(cell_type))
View(tmp)
tmp$cell_type
str_length(tmp$cell_type)
cell_type_map %>%
filter(method_dataset %in% c("cibersort_abs", "xcell", "mcp_counter")) %>%
group_by(cell_type) %>%
summarise(freq = n(), method_dataset = toString(sort(method_dataset))) %>%
filter(freq > 1) %>%
group_by(method_dataset)
tmp <- cell_type_map %>%
filter(method_dataset %in% c("cibersort_abs", "xcell", "mcp_counter")) %>%
group_by(cell_type) %>%
summarise(freq = n(), method_dataset = toString(sort(method_dataset))) %>%
filter(freq > 1) %>%
group_by(method_dataset) %>%
summarise(cell_type = toString(cell_type), ntypes = n())
View(tmp)
source("http://bioconductor.org/biocLite.R")
BiocManager::install(c('circlize','ComplexHeatmap','lsmeans','spatstat'))
install.packages("~/Downloads/IMvigor210CoreBiologies_1.0.0.tar.gz", repos=NULL)
BiocManager::install(c('circlize','ComplexHeatmap','lsmeans','spatstat','DESeq2','DESeq'))
install.packages("~/Downloads/IMvigor210CoreBiologies_1.0.0.tar.gz", repos=NULL)
library(IMvigor210CoreBiologies)
# expression
data(cds)
head(counts(cds))
head(fData(cds))
head(pData(cds))
data(fmone)
ls.str(assayData(fmone))
head(pData(fmone))
head(assayDataElement(fmone, "known_short"))
head(pData(fmone))
data("dat19")
data("dat57")
data("dat25")
library(knitr)
library(rmarkdown)
analysis_dir <- system.file("analysis", package="IMvigor210CoreBiologies")
render(file.path(analysis_dir, "mouseTumorImaging-CD3-pooledAnalysis.Rmd"),
output_dir='~/Desktop/')
data(human_gene_signatures)
View(human_gene_signatures)
data(color_palettes)
analysis_dir <- system.file("analysis", package="IMvigor210CoreBiologies")
render(file.path(analysis_dir,
"Figure1.Rmd"),
output_dir="~/Desktop/")
analysis_dir <- system.file("analysis", package="IMvigor210CoreBiologies")
render(file.path(analysis_dir,
"Figure1.Rmd"),
output_dir="~/Desktop/")
data(human_gene_signatures)
View(human_gene_signatures)
render(file.path(analysis_dir,
"Figure2.Rmd"),
output_dir='~/Desktop/')
cds2
pData(cds2)
cds
pData(cds_
pData(cds)
library(IMvigor210CoreBiologies)
library(knitr)
library(rmarkdown)
# expression
data(cds)
head(counts(cds))
head(fData(cds))
head(pData(cds))
analysis_dir <- system.file("analysis", package="IMvigor210CoreBiologies")
analysis_dir
data(human_gene_signatures)
unlist(human_gene_signatures)
df <- data.frame(matrix(unlist(human_gene_signatures), nrow=length(human_gene_signatures), byrow=T))
View(df)
data(human_gene_signatures)
datatable::rbindlist(human_gene_signatures)
data.table::rbindlist(human_gene_signatures)
data.table::rbindlist(l = human_gene_signatures)
class(human_gene_signatures)
data(human_gene_signatures)
data.table::rbindlist(l = human_gene_signatures)
as.data.frame(human_gene_signatures)
human_gene_signatures
data.table::rbindlist(l = human_gene_signatures, use.names = T)
data.table::rbindlist(l = human_gene_signatures, use.names = T, fill = T)
melt(human_gene_signatures)
human_gene_signatures <- melt(human_gene_signatures)
View(human_gene_signatures)
unique(human_gene_signatures$L1)
load("/Users/rathik/Projects/PancModelUpdate/results/immune_signatures/xCell_rawdata.RData")
get(nm)
load("/Users/rathik/Projects/PancModelUpdate/results/immune_signatures/xCell_rawdata.RData")
View(xCell)
load("/Users/rathik/Projects/PancModelUpdate/results/immune_signatures/CIBERSORT_(abs.)_rawdata.RData")
View(`CIBERSORT_(abs.)`)
rowSums(`CIBERSORT_(abs.)`)
rowSums(`CIBERSORT_(abs.)`[,2:ncol(`CIBERSORT_(abs.)`)])
colSums(`CIBERSORT_(abs.)`[,2:ncol(`CIBERSORT_(abs.)`)])
# average exp of F-TBRS (pan-fibroblast TGFB response signature)
# low in immune deserts
# significantly high in inflamed and excluded tumors
dat <- read.delim('~/Downloads/cibersort_input_52samples_1.txt')
View(dat)
dat2  <-  read.delim('~/Projects/PancModelUpdate/data/immune_profiling/cibersort_input.txt')
View(dat2)
View(dat)
setdiff(dat$X.Sample_title, dat2$X.Sample_title)
intersect(dat$X.Sample_title, dat2$X.Sample_title)
length(intersect(dat$X.Sample_title, dat2$X.Sample_title))
# average exp of F-TBRS (pan-fibroblast TGFB response signature)
# low in immune deserts
# significantly high in inflamed and excluded tumors
dat <- read.delim('~/Downloads/cibersort_input_52samples_1.txt')
View(dat)
which(dat$X.Sample_title == "")
which(dat2$X.Sample_title == "")
setwd('~/Projects/MedulloClassifier/')
# load libraries
library(ggplot2)
library(Rtsne)
library(tidyverse)
source('R/utils/pubTheme.R')
# build models
source('R/utils/pubTheme.R')
if(!file.exists('data/model/medulloSetsUpRNASeq.RDS')){
source('R/01_BuildClassifierRNASeq.R')
}
if(!file.exists('data/model/medulloSetsUpGSE37418.RDS')){
source('R/02_BuildClassifierMicroarray.R')
}
# Get sets
medulloSetsRSQ <- readRDS('data/model/medulloSetsUpRNASeq.RDS')
medulloSetsMIA <- readRDS('data/model/medulloSetsUpGSE37418.RDS')
# Create Merged dataset
medulloGeneSetsUp <- list()
medulloGeneSetsUp$WNT <- union(medulloSetsRSQ$WNT, medulloSetsMIA$WNT)
medulloGeneSetsUp$SHH <- union(medulloSetsRSQ$SHH, medulloSetsMIA$SHH)
medulloGeneSetsUp$Group3 <- union(medulloSetsRSQ$Group3, medulloSetsMIA$Group3)
medulloGeneSetsUp$Group4 <- union(medulloSetsRSQ$Group4, medulloSetsMIA$Group4)
allGeneCombos <- c(medulloGeneSetsUp$WNT, medulloGeneSetsUp$SHH, medulloGeneSetsUp$Group3, medulloGeneSetsUp$Group4)
# Print length of each subtype gene ratio signature
print(paste("The number of gene ratios in the SHH signature is", length(medulloGeneSetsUp$SHH)))
print(paste("The number of gene ratios in the WNT signature is", length(medulloGeneSetsUp$WNT)))
print(paste("The number of gene ratios in the G3 signature is", length(medulloGeneSetsUp$Group3)))
print(paste("The number of gene ratios in the G4 signature is", length(medulloGeneSetsUp$Group4 )))
print(paste("The total number of gene ratios in the model is", length(allGeneCombos)))
# Figure 1C: barplot of GERs per subtype
medulloSigTS <- stack(medulloGeneSetsUp)
colnames(medulloSigTS) <- c("GeneRatio", "Subtype")
medulloSigTSCount <- data.frame(table(medulloSigTS[,"Subtype"]))
medulloSigTSCount$Var1 <- factor(medulloSigTSCount$Var1, levels = c("Group3", "Group4", "SHH", "WNT", "Unknown"))
colnames(medulloSigTSCount) <- c("subtype","gers")
fig2c  <- ggplot(medulloSigTSCount, aes(x = subtype, y = gers, fill = subtype)) +
geom_bar(stat = "identity") +
geom_text(aes(label = gers, hjust = 0.5, vjust = 2), color = 'white') +
xlab("Molecular Subtype") + ylab("Count of GERs") +
theme_Publication(base_size = 10) + guides(fill = FALSE)
# Figure 2B: T-SNE for DS1
ds1GER <- readRDS("data/RNASeqDataForPlotDS1.RDS")
ds1geneRatioOut <- ds1GER[[1]]
ds1sampAnnot <- ds1GER[[2]]
# Figure 2C: T-SNE for DS2
ds2GER <- readRDS("data/RNASeqDataForPlotDS2.RDS")
ds2geneRatioOut <- ds2GER[[1]]
ds2sampAnnot <- ds2GER[[2]]
# Figure 2C: Frequency Plot
medulloGeneSetsUpTS <- stack(medulloGeneSetsUp)
getSets <- function(x) {
out <- strsplit(x, split="_")[[1]];
upG <- out[1]
downG <- out[2];
return(c(upG, downG));
}
medulloGeneSetsUpTS <- data.frame(medulloGeneSetsUpTS, t(sapply(medulloGeneSetsUpTS[,1], FUN=getSets)));
colnames(medulloGeneSetsUpTS)[3:4] <- c("upGene", "downGene")
upGeneMat <- data.frame(table(medulloGeneSetsUpTS[,c("upGene", "ind")]));
downGeneMat <- data.frame(table(medulloGeneSetsUpTS[,c("downGene", "ind")]));
getTopXBar <- function(myMat=NULL, topx=5) {
myTabTmp <- myMat %>% group_by(ind) %>% top_n(topx, Freq)
myTabTmp <- data.frame(myTabTmp);
myTabTmp <- myTabTmp[order(-myTabTmp[,3]),];
myTabTmp[,1] <- factor(myTabTmp[,1], levels=unique(myTabTmp[,1]))
colnames(myTabTmp)[1] <- "Gene";
p <- ggplot(myTabTmp, aes(Gene, Freq)) +
geom_bar(stat="identity") + facet_grid(~ind, scales="free")
p <- p + theme_Publication(base_size = 10) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
p <- p + ylab("Frequency")
return(list(myTabTmp, p))
}
# Top 5
upGeneMat$ind <- factor(upGeneMat$ind, levels = c("Group3", "Group4", "SHH", "WNT"))
# Bottom 5
downGeneMat$ind <- factor(downGeneMat$ind, levels = c("Group3", "Group4", "SHH", "WNT"))
# Figure4: Frequency Plot - Figure 4
ds1geneRatioOut <- ds1GER[[1]]
ds1sampAnnot <- ds1GER[[2]]
ds1geneRatioOut
head(ds1geneRatioOut)
head(ds1sampAnnot)
IntWNT <- intersect(medulloSetsRSQ$WNT, medulloSetsMIA$WNT)
IntSHH <- intersect(medulloSetsRSQ$SHH, medulloSetsMIA$SHH)
IntGroup3 <- intersect(medulloSetsRSQ$Group3, medulloSetsMIA$Group3)
IntGroup4 <- intersect(medulloSetsRSQ$Group4, medulloSetsMIA$Group4)
ds1geneRatioOut
ds1geneRatioOut['MAK_RGL1',]
IntWNT
IntSHH
IntGroup3
# Get sets
medulloSetsRSQ <- readRDS('data/model/medulloSetsUpRNASeq.RDS')
medulloSetsMIA <- readRDS('data/model/medulloSetsUpGSE37418.RDS')
# Libraries
library(tidyverse)
library(preprocessCore)
library(pheatmap)
library(Rtsne)
library(reshape2)
library(ggplot2)
# Source scripts
source("R/utils/runLimma.R")
source("R/utils/pubTheme.R")
source("R/utils/createRatio.R")
# Read RNA-Seq data
mtData <- readRDS("data/Medullo_MikeTaylor_Genes.RDS")
# Get the unique samples
sampAnnot <- unique(mtData[,c("Sample", "Subgroup")])
rownames(sampAnnot) <- sampAnnot[,1]
# mtData is Tall-skinny so going to transform to short-wide, keeping only certain columns i.e. removing expected_count, study, and subgroup
keepCols <- c("gene_id", "gene_symbol", "FPKM", "Sample")
expDataF <- mtData[,keepCols]
expDataFts <- tidyr::spread(expDataF, key="Sample", value="FPKM")
# Let's remove the gene_id (Ensembl) and gene_symbol (entrez) because we will want gene symbols as our rows (unique gene symbols)
geneAnnot <- expDataFts[1:2]
rownames(geneAnnot) <- geneAnnot[,1]
# Set row names as gene_id, this will be updated in the filter section to gene symbol
rownames(expDataFts) <- expDataFts[,1]
expDataFts <- data.frame(expDataFts[-1:-2])
print(paste("The total number of genes is", nrow(expDataFts)))
####################
# 2. Inital Filter of RNA-Seq Matrix
######################
# Remove genes that have less than 20 FPKM max
maxFPKMperGene <- apply(log2(expDataFts), FUN=max, MARGIN=1)
#png("results/plots/SuppFig1A.png", width=960, height=960, res=150)
#hist(maxFPKMperGene, breaks=1000, xlab="Log2 (FPKM)", main="Histogram of Maximum FPKM Per Gene")
#abline(v=log(20), col="red", lwd=3, lty=2)
#dev.off()
histo <- as.data.frame(maxFPKMperGene)
s1a <- ggplot(histo, aes(x = maxFPKMperGene)) + geom_histogram(bins = 1000, color = "black") +
theme_Publication(base_size = 12) +
xlab("Log2 (FPKM)") + ylab("Frequency")  +
geom_vline(xintercept = log(20), linetype = "dashed", color = "red") +
scale_x_continuous(breaks = seq(from = -5, to = 15, by = 5))
expDataFts <- expDataFts[apply(expDataFts, FUN=max, MARGIN=1)>20,] # 12334 genes
print(paste("After filtering by FPKM, the total number of genes is", nrow(expDataFts)))
# Remove genes with low coefficient of variance
myCV <- function(x) { mean(x)/sd(x) }
allCVs <- log2(apply(expDataFts, FUN=myCV, MARGIN=1))
allCVs <- (allCVs-mean(allCVs))/sd(allCVs)
histo <- as.data.frame(allCVs)
s1b <- ggplot(histo, aes(x = allCVs)) + geom_histogram(bins = 1000, color = "black") +
theme_Publication(base_size = 12) +
xlab("Z-score of CVs (Log2 FPKM)") + ylab("Frequency")  +
geom_vline(xintercept = -1, linetype = "dashed", color = "red") +
scale_x_continuous(breaks = seq(from = -3, to = 1, by = 1))
# png("results/plots/SuppFig1B.png", width=960, height=960, res=150)
# hist(allCVs, breaks=1000, xlab="Z-score of CVs (Log2 FPKM)", main="Histogram of Standardized CVs per Gene")
# abline(v=(-1), col="red", lwd=3, lty=2)
# dev.off()
expDataFts <- expDataFts[allCVs>(-1),]  # 10335 genes
print(paste("After filtering by CV, the total number of genes is", nrow(expDataFts)))
expDataFts[,"Max"] <- apply(expDataFts, FUN=max, MARGIN=1)
expDataFts <- expDataFts[order(-expDataFts[,"Max"]),]
expDataFts[,"GeneName"] <- geneAnnot[rownames(expDataFts),2]
expDataFts <- expDataFts[!duplicated(expDataFts[,"GeneName"]),]
rownames(expDataFts)<- expDataFts[,"GeneName"]
expDataFts <- expDataFts[1:(ncol(expDataFts)-2)] # 10326 rows
print(paste("After getting one gene symbol per row", nrow(expDataFts)))
expDataFts <- expDataFts[!grepl("^MT-", rownames(expDataFts)),]
expDataFts <- expDataFts[!grepl("Metazoa_SRP", rownames(expDataFts)),]
expDataFts <- expDataFts[!grepl("^RPS", rownames(expDataFts)),]
expDataFts <- expDataFts[!grepl("^RPL", rownames(expDataFts)),]
expDataFts <- expDataFts[!grepl("^SNORD", rownames(expDataFts)),]
expDataFts <- expDataFts[!grepl("-", rownames(expDataFts)),]
expDataFts <- expDataFts[!grepl("\\.", rownames(expDataFts)),]
print(paste("After removing MT and RPL genes, the total number of genes is", nrow(expDataFts))) # 9633
expDataFts_QN <- preprocessCore::normalize.quantiles(as.matrix(log2(expDataFts+1))) #Quantile normalization first and then set row/col names
rownames(expDataFts_QN) <- rownames(expDataFts)
colnames(expDataFts_QN) <- colnames(expDataFts)
expDataFts_QN <- data.frame(expDataFts_QN)
colnames(expDataFts_QN) <- rownames(sampAnnot)
output <- runLimma(sampAnnot[2],
cont=c("SHH-Group4", "SHH-Group3", "SHH-WNT",
"WNT-Group4", "WNT-Group3", "WNT-SHH",
"Group4-WNT", "Group4-SHH", "Group4-Group3",
"Group3-WNT", "Group3-SHH", "Group3-Group4"), expDataFts_QN)
# Returns the upregulated genes based on FC cutoff
getGenesUp <- function(x, pvalcutoff=0.05, lfccutoff=log2(2)) {
tmpTable <- topTable(output[[1]], x, 20000)
tmpTable <- tmpTable[tmpTable[,"adj.P.Val"]<pvalcutoff,]
tmpTable <- tmpTable[tmpTable[,"logFC"]>lfccutoff,]
return(rownames(tmpTable))
}
# Returns the down-regulated genes based on FC cutoff
getGenesDown <- function(x, pvalcutoff=0.05, lfccutoff=log2(2)) {
tmpTable<- topTable(output[[1]], x, 20000)
tmpTable <- tmpTable[tmpTable[,"adj.P.Val"]<pvalcutoff,]
tmpTable <- tmpTable[tmpTable[,"logFC"]<((-1)*lfccutoff),]
return(rownames(tmpTable))
}
# Returns the most 250 (or user specified)  up-regulated genes
getGenesUpTop <- function(x, pvalcutoff=0.05, top=250) {
tmpTable <- topTable(output[[1]], x, 20000)
tmpTable <- tmpTable[tmpTable[,"logFC"]>0,]
tmpTable <- tmpTable[order(tmpTable[,"adj.P.Val"]),][1:top,]
return(rownames(tmpTable))
}
# Returns the most 250 (or user specified) down-regulated genes
getGenesDownTop <- function(x, pvalcutoff=0.05, top=250) {
tmpTable<- topTable(output[[1]], x, 20000)
tmpTable <- tmpTable[tmpTable[,"logFC"]<0,]
tmpTable <- tmpTable[order(tmpTable[,"adj.P.Val"]),][1:top,]
return(rownames(tmpTable))
}
###################################
# 4. Get all Differentially expressed genes associated with each subtype
# We are filtering to genes that are specific for each subtype
# Filters differ between subtypes so that we can get at least a few genes for each
###################################
# Genes that are DE in one subtype vs rest - Upregulated & Downregulated & take intersection
shhGenesUpInt <- Reduce(intersect, list(getGenesUp(1),getGenesUp(2),getGenesUp(3)))
WNTGenesUpInt <- Reduce(intersect, list(getGenesUp(4),getGenesUp(5),getGenesUp(6)))
g4GenesUpInt <- Reduce(intersect, list(getGenesUp(7, pvalcutoff=0.05, lfccutoff=log2(1.5)),getGenesUp(8, pvalcutoff=0.05, lfccutoff=log2(1.5)),getGenesUp(9, pvalcutoff=0.05, lfccutoff=log2(1.5))))
g3GenesUpInt <- Reduce(intersect, list(getGenesUp(10, pvalcutoff=0.05, lfccutoff=log2(1.5)),getGenesUp(11, pvalcutoff=0.05, lfccutoff=log2(1.5)),getGenesUp(12, pvalcutoff=0.05, lfccutoff=log2(1.5))))
shhGenesDownInt <- Reduce(intersect, list(getGenesDown(1),getGenesDown(2),getGenesDown(3)))
WNTGenesDownInt <- Reduce(intersect, list(getGenesDown(4),getGenesDown(5),getGenesDown(6)))
g4GenesDownInt <- Reduce(intersect, list(getGenesDown(7, pvalcutoff=0.05, lfccutoff=log2(1.5)),getGenesDown(8, pvalcutoff=0.05, lfccutoff=log2(1.5)),getGenesDown(9, pvalcutoff=0.05, lfccutoff=log2(1.5))))
g3GenesDownInt <- Reduce(intersect, list(getGenesDown(10, pvalcutoff=0.05, lfccutoff=log2(1.5)),getGenesDown(11, pvalcutoff=0.05, lfccutoff=log2(1.5)),getGenesDown(12, pvalcutoff=0.05, lfccutoff=log2(1.5))))
# Genes the top 250 DE genes in one subtype vs rest and take union
shhGenesUpUnion <- Reduce(union, list(getGenesUpTop(1),getGenesUpTop(2),getGenesUpTop(3)))
WNTGenesUpUnion <- Reduce(union, list(getGenesUpTop(4),getGenesUpTop(5),getGenesUpTop(6)))
g4GenesUpUnion <- Reduce(union, list(getGenesUpTop(7),getGenesUpTop(8),getGenesUpTop(9)))
g3GenesUpUnion <- Reduce(union, list(getGenesUpTop(10),getGenesUpTop(11),getGenesUpTop(12)))
shhGenesDownUnion <- Reduce(union, list(getGenesDownTop(1),getGenesDownTop(2),getGenesDownTop(3)))
WNTGenesDownUnion <- Reduce(union, list(getGenesDownTop(4),getGenesDownTop(5),getGenesDownTop(6)))
g4GenesDownUnion <- Reduce(union, list(getGenesDownTop(7),getGenesDownTop(8),getGenesDownTop(9)))
g3GenesDownUnion <- Reduce(union, list(getGenesDownTop(10),getGenesDownTop(11),getGenesDownTop(12)))
# Merge lists i.e. union & intersection
shhGenesUp <- c(shhGenesUpInt, shhGenesUpUnion)
shhGenesDown <- c(shhGenesDownInt, shhGenesDownUnion)
WNTGenesUp <- c(WNTGenesUpInt, WNTGenesUpUnion)
WNTGenesDown <- c(WNTGenesDownInt, WNTGenesDownUnion)
g4GenesUp <- c(g4GenesUpInt, g4GenesUpUnion)
g4GenesDown <- c(g4GenesDownInt, g4GenesDownUnion)
g3GenesUp <- c(g3GenesUpInt, g4GenesUpUnion)
g3GenesDown <- c(g3GenesDownInt, g3GenesDownUnion)
# Subtype specific Genes
shhGenes <- c(shhGenesUp, shhGenesDown)
wntGenes <- c(WNTGenesUp, WNTGenesDown)
g3Genes <- c(g3GenesUp, g3GenesDown)
g4Genes <- c(g4GenesUp, g4GenesDown)
# All UpGenes
upGenes <- c(shhGenesUp, WNTGenesUp, g4GenesUp, g3GenesUp)
# All DownGenes
downGenes <- c(shhGenesDown, WNTGenesDown, g4GenesDown, g3GenesDown)
# Best genes are up in some subtypes and down in others
bestGenes <- sort(intersect(upGenes, downGenes)) #1399 genes
sampAnnot$Subgroup <- factor(sampAnnot$Subgroup, levels = c("Group3", "Group4", "SHH", "WNT"))
ann_colors = list(
Subgroup = c(Group3 = "#F8766D", Group4 = "#7CAE00", SHH = "#00BFC4", WNT = "#C77CFF")
)
fig2b <- pheatmap(expDataFts_QN[bestGenes,],
show_rownames=F, show_colnames=F,
annotation_col= sampAnnot[2],
annotation_colors =  ann_colors,
clustering_distance_cols="correlation")
corGenes <- cor(t(expDataFts_QN[bestGenes,]))
corGenes[lower.tri(corGenes)] <- 1
corGenes <- data.frame(melt(corGenes))
corGenes <- corGenes[corGenes[,"value"]<.99,] #remove when both the same gene or highly correlated
print(paste("Cor Matrix Created and processing", nrow(corGenes), "rows", sep=" "))
expDataFts_QNMat <- as.matrix(expDataFts_QN)
geneRatioOut <- apply(corGenes, FUN = function(x) createRatio(exprs = expDataFts_QNMat, x = x), MARGIN=1)
geneRatioOut <- data.frame(t(geneRatioOut))
rownames(geneRatioOut) <- paste(corGenes[,1], corGenes[,2], sep="_")
colnames(geneRatioOut) <- colnames(expDataFts_QN)
print(paste("Gene Ratios created and processing ", nrow(geneRatioOut), "rows", sep=" "))
# Filter to only high and low ratios first
geneRatioOutM <- reshape2::melt(geneRatioOut)
# Plot of gene ratios in dataset
# png("results/plots/SuppFig1C.png", width=800, height=800, res=150)
# s <- hist(log2(geneRatioOutM[,2]), breaks=1000, main="Histogram of Gene Ratios (Log2)", xlab="Log2 Gene Ratio")
s2a <- ggplot(geneRatioOutM, aes(log2(value))) +
geom_histogram(bins = 1000, color = "black") +
theme_Publication(base_size = 12) + ylab("Frequency") +
xlab("Log2 Gene Ratio")
ggsave(filename = "results/plots/SuppFig2A.png", plot = s2a, width = 6, height = 6)
# save all figures to combine later
# save(s1a, s1b, fig2b, s2a, file = "results/Fig_S1A_S1B_2B_s2a.RData")
save(s1a, s1b, file = "results/Fig_S1A_S1B.RData")
save(fig2b, file = 'results/Fig_2B.RData')
save(s2a, file = 'results/Fig_S2A.RData')
# Load libraries
library(reshape2)
library(preprocessCore)
library(GEOquery)
# Source Functions
source("R/utils/runLimma.R")
source("R/utils/pubTheme.R")
source("R/utils/getGenes.R")
source("R/utils/createRatio.R")
################################
# 1. Load and format data to one gene
# symbol per row
################################
# Load data
if(file.exists('data/loadedGSE_37418.RData')){
load("data/loadedGSE_37418.RData")
} else {
data_37418 <- getGEO('GSE37418',GSEMatrix=TRUE)
annot_37418 <- pData(phenoData(data_37418[[1]]))
exprs_37418 <- exprs(data_37418[[1]])
save.image("data/loadedGSE_37418.RData")
}
# Convert expression matrix to gene symbol
geneAnnot <- read.delim("data/GPL570-55999.txt", skip=16)
geneAnnot <- geneAnnot[,c("ID", "Gene.Symbol")]
exprs_37418_Tmp <- normalize.quantiles(as.matrix(exprs_37418))
rownames(exprs_37418_Tmp) <- rownames(exprs_37418)
colnames(exprs_37418_Tmp )<- colnames(exprs_37418)
exprs_37418 <- exprs_37418_Tmp
exprs_37418 <- data.frame(exprs_37418)
exprs_37418[,"Max"] <- apply(exprs_37418, FUN=max, MARGIN=1)
exprs_37418[,"Probe"] <- rownames(exprs_37418)
exprs_37418 <- merge(exprs_37418, geneAnnot, by.x="Probe", by.y="ID")
exprs_37418 <- exprs_37418[order(-exprs_37418[,"Max"]),]
# Remove rows without gene symbols & make sure one symbol per row
exprs_37418 <- exprs_37418[exprs_37418[,"Gene.Symbol"]!="",]
exprs_37418 <- exprs_37418[!duplicated(exprs_37418[,"Gene.Symbol"]),]
rownames(exprs_37418) <- exprs_37418[,"Gene.Symbol"]
exprs_37418 <- exprs_37418[-1]
exprs_37418 <- exprs_37418[1:(ncol(exprs_37418)-2)]
################################
# 2. Now read in signature genes
# Filter matrix to signature genes
# and Create Gene Ratios
################################
# Read in signature probes
signatureProbes <- readRDS("data/model/bestFeaturesNewRNASeq.RDS")
medulloGeneSetsUp <- readRDS("data/model/medulloSetsUpRNASeq.RDS")
# Pull out signature genes
signatureGenes <- sapply(signatureProbes, FUN=getGenes)
signatureGenes <- as.character(signatureGenes)
signatureGenes <- unique(signatureGenes)
# Filter Matrix
exprs_37418_SG <- exprs_37418[intersect(rownames(exprs_37418), signatureGenes), ]
# Create Ratios
# This correlation is just performed to get all pairs of gene, there may be an easier way of course
corGenes <- cor(t(exprs_37418_SG))
corGenes <- data.frame(reshape2::melt(corGenes))
corGenes <- corGenes[corGenes[,"value"]<.99,]
print(paste("Cor Matrix Created and processing", nrow(corGenes), "rows", sep=" "))
# Now create all gene ratios, this part will take a while
exprs_37418 <- as.matrix(exprs_37418)
geneRatioOut <- apply(corGenes, FUN = function(x) createRatio(exprs = exprs_37418, x = x), MARGIN=1)
geneRatioOut <- data.frame(t(geneRatioOut))
rownames(geneRatioOut) <- paste(corGenes[,1], corGenes[,2], sep="_")
colnames(geneRatioOut) <- colnames(exprs_37418)
print(paste("Gene Ratios created and processing", nrow(geneRatioOut), "rows", sep=" "))
# Filter to only high and low ratios first
geneRatioOutM <- reshape2::melt(geneRatioOut)
# Plot of gene ratios in dataset
# png("results/plots/SuppFig2A.png", width=800, height=800, res=150)
# hist(log2(geneRatioOutM[,2]), breaks=1000, main="Histogram of Gene Ratios (Log2)", xlab="Log2 Gene Ratio")
s2b <- ggplot(geneRatioOutM, aes(log2(value))) +
geom_histogram(bins = 1000, color = "black") +
theme_Publication(base_size = 12) + ylab("Frequency") +
xlab("Log2 Gene Ratio")
ggsave(filename = "results/plots/SuppFig2B.png", plot = s1d, width = 6, height = 6)
save(s2b, file = "results/Fig_S2B.RData")
ggsave(filename = "results/plots/SuppFig2B.png", plot = s2b, width = 6, height = 6)
load('results/Fig_S1A_S1B.RData')
load('results/Fig_S2A.RData')
load('results/Fig_S2B.RData')
load('results/Fig_2B.RData')
load('results/Fig_2C.RData')
ggexport(ggarrange(s1a, s1b, labels = c("A", "B"),
align = "h"),
filename = "results/plots/SuppFigure1.pdf")
# script to combine plots for Figure 2 and Supp Figure 1
library(ggpubr)
ggexport(ggarrange(s1a, s1b, labels = c("A", "B"),
align = "h"),
filename = "results/plots/SuppFigure1.pdf")
ggexport(ggarrange(s2a, s2b, labels = c("A", "B"),
align = "h"),
filename = "results/plots/SuppFigure2.pdf")
ggexport(ggarrange(s1a, s1b, labels = c("A", "B"),
align = "h"), width = 10, height = 6,
filename = "results/plots/SuppFigure1.pdf")
ggexport(ggarrange(s1a, s1b, labels = c("A", "B"),
align = "h"), width = 10, height = 5,
filename = "results/plots/SuppFigure1.pdf")
ggexport(ggarrange(s2a, s2b, labels = c("A", "B"),
align = "h"), width = 10, height = 5,
filename = "results/plots/SuppFigure2.pdf")
