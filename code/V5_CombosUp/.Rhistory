signatureGenes <- as.character(signatureGenes);
signatureGenes <- unique(signatureGenes);
#Filter Matrix
resM_SG <- resM[intersect(rownames(resM), signatureGenes), ]
#Create Ratios
createRatio <- function(x)
{
g1 <- x[1];
g2 <- x[2];
g1g2_ratio <- 2^(log2(resM_SG[g1,]+1)-log2(resM_SG[g2,]+1))
return(g1g2_ratio)
}
library(reshape2);
corGenes <- cor(t(resM_SG));
corGenes <- data.frame(melt(corGenes));
corGenes <- corGenes[corGenes[,"value"]<.99,];
print(paste("Cor Matrix Created and processing", nrow(corGenes), "rows", sep=" "));
resM_SG <- as.matrix(resM_SG);
geneRatioOut <- apply(corGenes, FUN=createRatio, MARGIN=1)
geneRatioOut <- data.frame(t(geneRatioOut));
rownames(geneRatioOut) <- paste(corGenes[,1], corGenes[,2], sep="_");
colnames(geneRatioOut) <- colnames(resM_SG)
print(paste("Gene Ratios created and processing ", nrow(geneRatioOut), "rows", sep=" "));
geneRatioOut <- geneRatioOut[intersect(rownames(geneRatioOut), signatureProbes),]
medulloGeneSetsUp <- readRDS("medulloSetsUp.RDS");
medulloGeneSetsUp$WNT <- intersect(medulloGeneSetsUp$WNT, rownames(geneRatioOut))
medulloGeneSetsUp$SHH <- intersect(medulloGeneSetsUp$SHH, rownames(geneRatioOut))
medulloGeneSetsUp$Group3 <- intersect(medulloGeneSetsUp$Group3, rownames(geneRatioOut))
medulloGeneSetsUp$Group4 <- intersect(medulloGeneSetsUp$Group4, rownames(geneRatioOut))
#Classify
myMat <- calcScoreMat(geneRatioOut, medulloGeneSetsUp);
myClassPred <- colnames(myMat)[max.col(myMat,ties.method="first")]
myClassPred <- data.frame(myClassPred, "Medullo");
rownames(myClassPred) <- colnames(geneRatioOut)
ClassPred <- myClassPred[order(myClassPred[,1]),]
geneRatioOut <- geneRatioOut[,rownames(ClassPred)]
pheatmap(log2(geneRatioOut),cluster_cols=F, show_rownames=F, show_colnames=F, annotation_col=ClassPred[1],clustering_distance_cols="correlation")
write.table(myClassPred, "MedulloPrediction_V2.txt", sep="\t", row.names=T)
medulloSetsUp <- readRDS("~/MedulloClassifier/code/V5_CombosUp/medulloSetsUp.RDS")
medulloSetsUp
medulloSetsUp(WNT)
medulloSetsUp[WNT]
medulloSetsUp['WNT']
$WNT
medulloSetsUp[$WNT]
source('~/MedulloClassifier/code/V5_CombosUp/classifyMedullo.R')
ng("../../results/V5_CombosUp/geneRatios_Heatmap.png", width=800, height=800, res=150)
pheatmap(log2(geneRatioOut[allGeneCombos,]+1), scale="row", show_rownames=F, show_colnames=F, annotation_col=sampAnnot[2],clustering_distance_cols="correlation")
d
#####################
#Plots
#####################
#Heatmap
#png("../../results/V5_CombosUp/geneRatios_Heatmap.png", width=800, height=800, res=150)
#pheatmap(log2(geneRatioOut[allGeneCombos,]+1), scale="row", show_rownames=F, show_colnames=F, annotation_col=sampAnnot[2],clustering_distance_cols="correlation")
#dev.off()
png("../../results/V5_CombosUp/geneRatios_Heatmap.png", width=800, height=800, res=150)
#####################
#Plots
#####################
#Heatmap
#png("../../results/V5_CombosUp/geneRatios_Heatmap.png", width=800, height=800, res=150)
#pheatmap(log2(geneRatioOut[allGeneCombos,]+1), scale="row", show_rownames=F, show_colnames=F, annotation_col=sampAnnot[2],clustering_distance_cols="correlation")
#dev.off()
png("geneRatios_Heatmap.png", width=800, height=800, res=150)
pheatmap(log2(geneRatioOut[allGeneCombos,]+1), scale="row", show_rownames=F, show_colnames=F, annotation_col=sampAnnot[2],clustering_distance_cols="correlation")
dev.off()
bestFeaturesNew <- readRDS("~/MedulloClassifier/code/V5_CombosUp/bestFeaturesNew.RDS")
bestFeaturesNew
medulloSetsUp
source('~/MedulloClassifier/code/V5_CombosUp/classifyGSE85217.R')
print(confusionMatrix(sampAnnot[,1], sampAnnot[,2]));
#Let's get all the data
#library("GEOquery");
#require("preprocessCore");
#data_85217 <- getGEO('GSE85217',GSEMatrix=TRUE);
#annot_85217 <- pData(phenoData(data_85217[[1]]));
#exprs_85217 <- exprs(data_85217[[1]]);
#save.image("../../data/loadedGSE_85217.RData")
library("pheatmap")
library("GSVA");
library("caret")
library("preprocessCore");
source("calcScore.R")
classifyGSE85217 <- function(signatureProbesLoc="bestFeaturesNew.RDS", medulloGeneSetsUpLoc="medulloSetsUp.RDS")
{
load("../../data/loadedGSE_85217.RData")
#Convert expression matrix to gene symbol
mapping <- read.delim("../../data/mappingRefseq.txt")
mapping <- mapping[,c(1,3)];
mapping <- unique(mapping);
geneAnnot <- mapping[mapping[,2]!="",]
#mapping <- mapping[!duplicated(mapping[,1]),]
colnames(geneAnnot) <- c("ID", "HGNC.symbol");
exprs_85217_Tmp <- normalize.quantiles(as.matrix(exprs_85217));
rownames(exprs_85217_Tmp) <- gsub("_at", "", rownames(exprs_85217));
colnames(exprs_85217_Tmp )<- colnames(exprs_85217);
exprs_85217 <- exprs_85217_Tmp
exprs_85217 <- data.frame(exprs_85217);
exprs_85217[,"Max"] <- apply(exprs_85217, FUN=max, MARGIN=1)
exprs_85217[,"Probe"] <- rownames(exprs_85217);
exprs_85217 <- merge(exprs_85217, geneAnnot, by.x="Probe", by.y="ID");
exprs_85217 <- exprs_85217[order(-exprs_85217[,"Max"]),]
exprs_85217 <- exprs_85217[!is.na(exprs_85217[,"HGNC.symbol"]),]
exprs_85217 <- exprs_85217[!duplicated(exprs_85217[,"HGNC.symbol"]),];
rownames(exprs_85217) <- exprs_85217[,"HGNC.symbol"];
exprs_85217 <- exprs_85217[-1];
exprs_85217 <- exprs_85217[1:(ncol(exprs_85217)-2)]
################################
#Now read in signature genes
#Filter matrix to signature genes
#and Create Gene Ratios
################################
signatureProbes <- readRDS(signatureProbesLoc)
medulloGeneSetsUp <- readRDS(medulloGeneSetsUpLoc)
getGenes <- function(x)
{
out <- strsplit(x, split="_")
output <- c(out[[1]])
}
signatureGenes <- sapply(signatureProbes, FUN=getGenes)
signatureGenes <- as.character(signatureGenes);
signatureGenes <- unique(signatureGenes);
#Filter Matrix
exprs_85217_SG <- exprs_85217[intersect(rownames(exprs_85217), signatureGenes), ]
#Create Ratios
createRatio <- function(x)
{
g1 <- x[1];
g2 <- x[2];
g1g2_ratio <- 2^(exprs_85217[g1,]-exprs_85217[g2,])
return(g1g2_ratio)
}
library(reshape2);
corGenes <- cor(t(exprs_85217_SG));
corGenes <- data.frame(melt(corGenes));
corGenes <- corGenes[corGenes[,"value"]<.99,];
print(paste("Cor Matrix Created and processing", nrow(corGenes), "rows", sep=" "));
exprs_85217 <- as.matrix(exprs_85217);
geneRatioOut <- apply(corGenes, FUN=createRatio, MARGIN=1)
geneRatioOut <- data.frame(t(geneRatioOut));
rownames(geneRatioOut) <- paste(corGenes[,1], corGenes[,2], sep="_");
colnames(geneRatioOut) <- colnames(exprs_85217)
print(paste("Gene Ratios created and processing ", nrow(geneRatioOut), "rows", sep=" "));
################################
#Filter to signature ratios
#Create Heatmap
################################
geneRatioOut <- geneRatioOut[intersect(rownames(geneRatioOut), signatureProbes),]
medulloGeneSetsUp <- readRDS("medulloSetsUp.RDS");
medulloGeneSetsUp$WNT <- intersect(medulloGeneSetsUp$WNT, rownames(geneRatioOut))
medulloGeneSetsUp$SHH <- intersect(medulloGeneSetsUp$SHH, rownames(geneRatioOut))
medulloGeneSetsUp$Group3 <- intersect(medulloGeneSetsUp$Group3, rownames(geneRatioOut))
medulloGeneSetsUp$Group4 <- intersect(medulloGeneSetsUp$Group4, rownames(geneRatioOut))
#Update class
myClassActual <- as.character(annot_85217[,"subgroup:ch1"]);
myClassActual <- gsub("Group 3", "Group3", myClassActual)
myClassActual <- gsub("Group 4", "Group4", myClassActual)
print("Classified");
myMat <- calcScoreMat(geneRatioOut, medulloGeneSetsUp);
myClassPred <- colnames(myMat)[max.col(myMat,ties.method="first")]
myScore <- sum(myClassPred==myClassActual)/(length(myClassActual))
sampAnnot <- data.frame(myClassPred, myClassActual);
colnames(sampAnnot) <- c("Pred", "Actual")
rownames(sampAnnot) <- colnames(geneRatioOut)
sampAnnot[,"Correct"] <- myClassPred==myClassActual
print(confusionMatrix(sampAnnot[,1], sampAnnot[,2]));
return(myScore)
}
print(confusionMatrix(sampAnnot[,1], sampAnnot[,2]));
print(sampAnnot[,1])
print(sampAnnot[,2])
sampAnnot[,2] <- as.character(sampleAnnot[,2])
sampAnnot[,2] <- as.character(sampAnnot[,2])
print(sampAnnot[,2])
print(confusionMatrix(sampAnnot[,1], sampAnnot[,2]));
source('~/MedulloClassifier/code/V5_CombosUp/classifyGSE85217.R')
#Let's get all the data
#library("GEOquery");
#require("preprocessCore");
#data_85217 <- getGEO('GSE85217',GSEMatrix=TRUE);
#annot_85217 <- pData(phenoData(data_85217[[1]]));
#exprs_85217 <- exprs(data_85217[[1]]);
#save.image("../../data/loadedGSE_85217.RData")
library("pheatmap")
library("GSVA");
library("caret")
library("preprocessCore");
source("calcScore.R")
classifyGSE85217 <- function(signatureProbesLoc="bestFeaturesNew.RDS", medulloGeneSetsUpLoc="medulloSetsUp.RDS")
{
load("../../data/loadedGSE_85217.RData")
#Convert expression matrix to gene symbol
mapping <- read.delim("../../data/mappingRefseq.txt")
mapping <- mapping[,c(1,3)];
mapping <- unique(mapping);
geneAnnot <- mapping[mapping[,2]!="",]
#mapping <- mapping[!duplicated(mapping[,1]),]
colnames(geneAnnot) <- c("ID", "HGNC.symbol");
exprs_85217_Tmp <- normalize.quantiles(as.matrix(exprs_85217));
rownames(exprs_85217_Tmp) <- gsub("_at", "", rownames(exprs_85217));
colnames(exprs_85217_Tmp )<- colnames(exprs_85217);
exprs_85217 <- exprs_85217_Tmp
exprs_85217 <- data.frame(exprs_85217);
exprs_85217[,"Max"] <- apply(exprs_85217, FUN=max, MARGIN=1)
exprs_85217[,"Probe"] <- rownames(exprs_85217);
exprs_85217 <- merge(exprs_85217, geneAnnot, by.x="Probe", by.y="ID");
exprs_85217 <- exprs_85217[order(-exprs_85217[,"Max"]),]
exprs_85217 <- exprs_85217[!is.na(exprs_85217[,"HGNC.symbol"]),]
exprs_85217 <- exprs_85217[!duplicated(exprs_85217[,"HGNC.symbol"]),];
rownames(exprs_85217) <- exprs_85217[,"HGNC.symbol"];
exprs_85217 <- exprs_85217[-1];
exprs_85217 <- exprs_85217[1:(ncol(exprs_85217)-2)]
################################
#Now read in signature genes
#Filter matrix to signature genes
#and Create Gene Ratios
################################
signatureProbes <- readRDS(signatureProbesLoc)
medulloGeneSetsUp <- readRDS(medulloGeneSetsUpLoc)
getGenes <- function(x)
{
out <- strsplit(x, split="_")
output <- c(out[[1]])
}
signatureGenes <- sapply(signatureProbes, FUN=getGenes)
signatureGenes <- as.character(signatureGenes);
signatureGenes <- unique(signatureGenes);
#Filter Matrix
exprs_85217_SG <- exprs_85217[intersect(rownames(exprs_85217), signatureGenes), ]
#Create Ratios
createRatio <- function(x)
{
g1 <- x[1];
g2 <- x[2];
g1g2_ratio <- 2^(exprs_85217[g1,]-exprs_85217[g2,])
return(g1g2_ratio)
}
library(reshape2);
corGenes <- cor(t(exprs_85217_SG));
corGenes <- data.frame(melt(corGenes));
corGenes <- corGenes[corGenes[,"value"]<.99,];
print(paste("Cor Matrix Created and processing", nrow(corGenes), "rows", sep=" "));
exprs_85217 <- as.matrix(exprs_85217);
geneRatioOut <- apply(corGenes, FUN=createRatio, MARGIN=1)
geneRatioOut <- data.frame(t(geneRatioOut));
rownames(geneRatioOut) <- paste(corGenes[,1], corGenes[,2], sep="_");
colnames(geneRatioOut) <- colnames(exprs_85217)
print(paste("Gene Ratios created and processing ", nrow(geneRatioOut), "rows", sep=" "));
################################
#Filter to signature ratios
#Create Heatmap
################################
geneRatioOut <- geneRatioOut[intersect(rownames(geneRatioOut), signatureProbes),]
medulloGeneSetsUp <- readRDS("medulloSetsUp.RDS");
medulloGeneSetsUp$WNT <- intersect(medulloGeneSetsUp$WNT, rownames(geneRatioOut))
medulloGeneSetsUp$SHH <- intersect(medulloGeneSetsUp$SHH, rownames(geneRatioOut))
medulloGeneSetsUp$Group3 <- intersect(medulloGeneSetsUp$Group3, rownames(geneRatioOut))
medulloGeneSetsUp$Group4 <- intersect(medulloGeneSetsUp$Group4, rownames(geneRatioOut))
#Update class
myClassActual <- as.character(annot_85217[,"subgroup:ch1"]);
myClassActual <- gsub("Group 3", "Group3", myClassActual)
myClassActual <- gsub("Group 4", "Group4", myClassActual)
print("Classified");
myMat <- calcScoreMat(geneRatioOut, medulloGeneSetsUp);
myClassPred <- colnames(myMat)[max.col(myMat,ties.method="first")]
myScore <- sum(myClassPred==myClassActual)/(length(myClassActual))
sampAnnot <- data.frame(myClassPred, myClassActual);
colnames(sampAnnot) <- c("Pred", "Actual")
rownames(sampAnnot) <- colnames(geneRatioOut)
sampAnnot[,"Correct"] <- myClassPred==myClassActual
print(confusionMatrix(sampAnnot[,1], sampAnnot[,2]));
return(myScore)
}
signatureProbesLoc="bestFeaturesNew.RDS";medulloGeneSetsUpLoc="medulloSetsUp.RDS"
load("../../data/loadedGSE_85217.RData")
#Convert expression matrix to gene symbol
mapping <- read.delim("../../data/mappingRefseq.txt")
mapping <- mapping[,c(1,3)];
mapping <- unique(mapping);
geneAnnot <- mapping[mapping[,2]!="",]
colnames(geneAnnot) <- c("ID", "HGNC.symbol");
exprs_85217_Tmp <- normalize.quantiles(as.matrix(exprs_85217));
rownames(exprs_85217_Tmp) <- gsub("_at", "", rownames(exprs_85217));
colnames(exprs_85217_Tmp )<- colnames(exprs_85217);
exprs_85217 <- exprs_85217_Tmp
exprs_85217 <- data.frame(exprs_85217);
exprs_85217[,"Max"] <- apply(exprs_85217, FUN=max, MARGIN=1)
exprs_85217[,"Probe"] <- rownames(exprs_85217);
exprs_85217 <- merge(exprs_85217, geneAnnot, by.x="Probe", by.y="ID");
exprs_85217 <- exprs_85217[order(-exprs_85217[,"Max"]),]
exprs_85217 <- exprs_85217[!is.na(exprs_85217[,"HGNC.symbol"]),]
exprs_85217 <- exprs_85217[!duplicated(exprs_85217[,"HGNC.symbol"]),];
rownames(exprs_85217) <- exprs_85217[,"HGNC.symbol"];
exprs_85217 <- exprs_85217[-1];
exprs_85217 <- exprs_85217[1:(ncol(exprs_85217)-2)]
################################
#Now read in signature genes
#Filter matrix to signature genes
#and Create Gene Ratios
################################
signatureProbes <- readRDS(signatureProbesLoc)
medulloGeneSetsUp <- readRDS(medulloGeneSetsUpLoc)
getGenes <- function(x)
{
out <- strsplit(x, split="_")
output <- c(out[[1]])
}
signatureGenes <- sapply(signatureProbes, FUN=getGenes)
signatureGenes <- as.character(signatureGenes);
signatureGenes <- unique(signatureGenes);
#Filter Matrix
exprs_85217_SG <- exprs_85217[intersect(rownames(exprs_85217), signatureGenes), ]
#Create Ratios
createRatio <- function(x)
{
g1 <- x[1];
g2 <- x[2];
g1g2_ratio <- 2^(exprs_85217[g1,]-exprs_85217[g2,])
return(g1g2_ratio)
}
library(reshape2);
corGenes <- cor(t(exprs_85217_SG));
corGenes <- data.frame(melt(corGenes));
corGenes <- corGenes[corGenes[,"value"]<.99,];
print(paste("Cor Matrix Created and processing", nrow(corGenes), "rows", sep=" "));
exprs_85217 <- as.matrix(exprs_85217);
geneRatioOut <- apply(corGenes, FUN=createRatio, MARGIN=1)
geneRatioOut <- data.frame(t(geneRatioOut));
rownames(geneRatioOut) <- paste(corGenes[,1], corGenes[,2], sep="_");
colnames(geneRatioOut) <- colnames(exprs_85217)
print(paste("Gene Ratios created and processing ", nrow(geneRatioOut), "rows", sep=" "));
geneRatioOut <- geneRatioOut[intersect(rownames(geneRatioOut), signatureProbes),]
medulloGeneSetsUp <- readRDS("medulloSetsUp.RDS");
medulloGeneSetsUp$WNT <- intersect(medulloGeneSetsUp$WNT, rownames(geneRatioOut))
medulloGeneSetsUp$SHH <- intersect(medulloGeneSetsUp$SHH, rownames(geneRatioOut))
medulloGeneSetsUp$Group3 <- intersect(medulloGeneSetsUp$Group3, rownames(geneRatioOut))
medulloGeneSetsUp$Group4 <- intersect(medulloGeneSetsUp$Group4, rownames(geneRatioOut))
#Update class
myClassActual <- as.character(annot_85217[,"subgroup:ch1"]);
myClassActual <- gsub("Group 3", "Group3", myClassActual)
myClassActual <- gsub("Group 4", "Group4", myClassActual)
print("Classified");
myClassActual
myMat <- calcScoreMat(geneRatioOut, medulloGeneSetsUp);
myClassPred <- colnames(myMat)[max.col(myMat,ties.method="first")]
myScore <- sum(myClassPred==myClassActual)/(length(myClassActual))
sampAnnot <- data.frame(myClassPred, myClassActual);
View(sampAnnot)
colnames(sampAnnot) <- c("Pred", "Actual")
rownames(sampAnnot) <- colnames(geneRatioOut)
sampAnnot[,"Correct"] <- myClassPred==myClassActual
print(confusionMatrix(sampAnnot[,1], sampAnnot[,2]));
BiocManager::install("e1071")
print(confusionMatrix(sampAnnot[,1], sampAnnot[,2]));
source('~/MedulloClassifier/code/V5_CombosUp/classifyGSE37418.R')
load("../../data/loadedGSE_37418.RData")
#Convert expression matrix to gene symbol
geneAnnot <- read.delim("../../data/GPL570-55999.txt", skip=16);
geneAnnot <- geneAnnot[,c("ID", "Gene.Symbol")];
exprs_37418_Tmp <- normalize.quantiles(as.matrix(exprs_37418));
rownames(exprs_37418_Tmp) <- rownames(exprs_37418);
colnames(exprs_37418_Tmp )<- colnames(exprs_37418);
exprs_37418 <- exprs_37418_Tmp
exprs_37418 <- data.frame(exprs_37418);
exprs_37418[,"Max"] <- apply(exprs_37418, FUN=max, MARGIN=1)
exprs_37418[,"Probe"] <- rownames(exprs_37418);
exprs_37418 <- merge(exprs_37418, geneAnnot, by.x="Probe", by.y="ID");
exprs_37418 <- exprs_37418[order(-exprs_37418[,"Max"]),]
exprs_37418 <- exprs_37418[exprs_37418[,"Gene.Symbol"]!="",]
exprs_37418 <- exprs_37418[!duplicated(exprs_37418[,"Gene.Symbol"]),];
rownames(exprs_37418) <- exprs_37418[,"Gene.Symbol"];
exprs_37418 <- exprs_37418[-1];
exprs_37418 <- exprs_37418[1:(ncol(exprs_37418)-2)]
signatureProbes <- readRDS(signatureProbesLoc)
medulloGeneSetsUp <- readRDS(medulloGeneSetsUpLoc)
getGenes <- function(x)
{
out <- strsplit(x, split="_")
output <- c(out[[1]])
}
signatureGenes <- sapply(signatureProbes, FUN=getGenes)
signatureGenes <- as.character(signatureGenes);
signatureGenes <- unique(signatureGenes);
#Filter Matrix
exprs_37418_SG <- exprs_37418[intersect(rownames(exprs_37418), signatureGenes), ]
#Create Ratios
createRatio <- function(x)
{
g1 <- x[1];
g2 <- x[2];
g1g2_ratio <- 2^(exprs_37418[g1,]-exprs_37418[g2,])
return(g1g2_ratio)
}
library(reshape2);
corGenes <- cor(t(exprs_37418_SG));
corGenes <- data.frame(melt(corGenes));
corGenes <- corGenes[corGenes[,"value"]<.99,];
print(paste("Cor Matrix Created and processing", nrow(corGenes), "rows", sep=" "));
exprs_37418 <- as.matrix(exprs_37418);
geneRatioOut <- apply(corGenes, FUN=createRatio, MARGIN=1)
geneRatioOut <- data.frame(t(geneRatioOut));
rownames(geneRatioOut) <- paste(corGenes[,1], corGenes[,2], sep="_");
colnames(geneRatioOut) <- colnames(exprs_37418)
print(paste("Gene Ratios created and processing", nrow(geneRatioOut), "rows", sep=" "));
geneRatioOut <- geneRatioOut[intersect(rownames(geneRatioOut), signatureProbes),]
medulloGeneSetsUp$WNT <- intersect(medulloGeneSetsUp$WNT, rownames(geneRatioOut))
medulloGeneSetsUp$SHH <- intersect(medulloGeneSetsUp$SHH, rownames(geneRatioOut))
medulloGeneSetsUp$Group3 <- intersect(medulloGeneSetsUp$Group3, rownames(geneRatioOut))
medulloGeneSetsUp$Group4 <- intersect(medulloGeneSetsUp$Group4, rownames(geneRatioOut))
#Update class
myClassActual <- as.character(annot_37418[,43]);
myClassActual <- gsub("G3", "Group3", myClassActual)
myClassActual <- gsub("G4", "Group4", myClassActual)
myClassActual <- gsub("SHH OUTLIER", "SHH", myClassActual)
print("Classified");
myMat <- calcScoreMat(geneRatioOut, medulloGeneSetsUp);
myClassPred <- colnames(myMat)[max.col(myMat,ties.method="first")]
myScore <- sum(myClassPred==myClassActual)/(length(myClassActual)-2)
sampAnnot <- data.frame(myClassPred, myClassActual);
colnames(sampAnnot) <- c("Pred", "Actual")
rownames(sampAnnot) <- colnames(geneRatioOut)
sampAnnot[,"Correct"] <- myClassPred==myClassActual
sampAnnot <- sampAnnot[sampAnnot[,2]!="U",]
sampAnnot[,2] <- factor(sampAnnot[,2], levels=c("Group3", "Group4", "WNT", "SHH"))
sampAnnot[,1] <- factor(sampAnnot[,1], levels=c("Group3", "Group4", "WNT", "SHH"))
print(confusionMatrix(sampAnnot[,1], sampAnnot[,2]));
print(confusionMatrix(sampAnnot[,1], sampAnnot[,2]));
load("../../data/loadedGSE_109401.RData")
#Convert expression matrix to gene symbol
geneAnnot <- read.delim("../../data/GPL16686.txt", skip=8);
mapping <- read.delim("../../data/mappingRefseq.txt")
mapping <- mapping[3:4];
mapping <- unique(mapping);
mapping <- mapping[mapping[,2]!="",]
mapping <- mapping[!duplicated(mapping[,2]),]
geneAnnot <- merge(geneAnnot, mapping, by.x="GB_ACC", by.y="RefSeq.mRNA.ID", all.x=T)
geneAnnot <- geneAnnot[,c("ID", "HGNC.symbol")];
colnames(geneAnnot)[2] <- "Gene.Symbol";
exprs_109401_Tmp <- normalize.quantiles(as.matrix(exprs_109401));
rownames(exprs_109401_Tmp) <- rownames(exprs_109401);
colnames(exprs_109401_Tmp )<- colnames(exprs_109401);
exprs_109401 <- exprs_109401_Tmp
exprs_109401 <- data.frame(exprs_109401);
exprs_109401[,"Max"] <- apply(exprs_109401, FUN=max, MARGIN=1)
exprs_109401[,"Probe"] <- rownames(exprs_109401);
exprs_109401 <- merge(exprs_109401, geneAnnot, by.x="Probe", by.y="ID");
exprs_109401 <- exprs_109401[order(-exprs_109401[,"Max"]),]
exprs_109401 <- exprs_109401[!is.na(exprs_109401[,"Gene.Symbol"]),]
exprs_109401 <- exprs_109401[!duplicated(exprs_109401[,"Gene.Symbol"]),];
rownames(exprs_109401) <- exprs_109401[,"Gene.Symbol"];
exprs_109401 <- exprs_109401[-1];
exprs_109401 <- exprs_109401[1:(ncol(exprs_109401)-2)]
################################
#Now read in signature genes
#Filter matrix to signature genes
#and Create Gene Ratios
################################
signatureProbes <- readRDS(signatureProbesLoc)
medulloGeneSetsUp <- readRDS(medulloGeneSetsUpLoc)
getGenes <- function(x)
{
out <- strsplit(x, split="_")
output <- c(out[[1]])
}
signatureGenes <- sapply(signatureProbes, FUN=getGenes)
signatureGenes <- as.character(signatureGenes);
signatureGenes <- unique(signatureGenes);
#Filter Matrix
exprs_109401_SG <- exprs_109401[intersect(rownames(exprs_109401), signatureGenes), ]
#Create Ratios
createRatio <- function(x)
{
g1 <- x[1];
g2 <- x[2];
g1g2_ratio <- 2^(exprs_109401[g1,]-exprs_109401[g2,])
return(g1g2_ratio)
}
library(reshape2);
corGenes <- cor(t(exprs_109401_SG));
corGenes <- data.frame(melt(corGenes));
corGenes <- corGenes[corGenes[,"value"]<.99,];
print(paste("Cor Matrix Created and processing", nrow(corGenes), "rows", sep=" "));
exprs_109401 <- as.matrix(exprs_109401);
geneRatioOut <- apply(corGenes, FUN=createRatio, MARGIN=1)
geneRatioOut <- data.frame(t(geneRatioOut));
rownames(geneRatioOut) <- paste(corGenes[,1], corGenes[,2], sep="_");
colnames(geneRatioOut) <- colnames(exprs_109401)
print(paste("Gene Ratios created and processing ", nrow(geneRatioOut), "rows", sep=" "));
geneRatioOut <- geneRatioOut[intersect(rownames(geneRatioOut), signatureProbes),]
medulloGeneSetsUp <- readRDS("../../results/V5_CombosUp/medulloSetsUp.RDS");
medulloGeneSetsUp$WNT <- intersect(medulloGeneSetsUp$WNT, rownames(geneRatioOut))
medulloGeneSetsUp <- readRDS("medulloSetsUp.RDS");
medulloGeneSetsUp$WNT <- intersect(medulloGeneSetsUp$WNT, rownames(geneRatioOut))
medulloGeneSetsUp$SHH <- intersect(medulloGeneSetsUp$SHH, rownames(geneRatioOut))
medulloGeneSetsUp$Group3 <- intersect(medulloGeneSetsUp$Group3, rownames(geneRatioOut))
medulloGeneSetsUp$Group4 <- intersect(medulloGeneSetsUp$Group4, rownames(geneRatioOut))
#Update class
myClassActual <- as.character(annot_109401[,"subgroup:ch1"]);
myClassActual <- gsub("Group 3", "Group3", myClassActual)
myClassActual <- gsub("Group 4", "Group4", myClassActual)
print("Classified");
myMat <- calcScoreMat(geneRatioOut, medulloGeneSetsUp);
myClassPred <- colnames(myMat)[max.col(myMat,ties.method="first")]
myScore <- sum(myClassPred==myClassActual)/(length(myClassActual))
sampAnnot <- data.frame(myClassPred, myClassActual);
colnames(sampAnnot) <- c("Pred", "Actual")
rownames(sampAnnot) <- colnames(geneRatioOut)
sampAnnot[,"Correct"] <- myClassPred==myClassActual
print(confusionMatrix(sampAnnot[,1], sampAnnot[,2]));
5==5
5=5
